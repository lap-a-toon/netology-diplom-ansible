---
- name: Update web servers
  hosts: web
  become: true
  tasks:
    - name: test
      debug:
        msg: "Ehlo!"
    - name: Run the equivalent of "apt-get update" as a separate step
      ansible.builtin.apt:
        update_cache: yes
    - name: Install a list of packages
      ansible.builtin.apt:
        pkg:
        - nginx
        - git
    - name: clear native nginx html_orig
      command: rm -rf /var/www/html_orig
    - name: clear native nginx www folder
      command: mv /var/www/html /var/www/html_orig
    - name: Download site from repo
      git:
        repo: https://github.com/lap-a-toon/Rasschet-kartochek-dlya-tuniketa-SATURN-TEC.git
        dest: /var/www/html
        update: yes
- name: Installing Prometheus
  hosts: prometheus
  become: true
  tasks:
    - name: copy install script prometheus
      template:
        src: install_prometheus.sh.j2
        dest: install_prometheus.sh
    - name: run install script prometheus
      command: bash ./install_prometheus.sh
    - name: config prometheus
      template:
        src: etc/prometheus/prometheus.j2
        dest: /etc/prometheus/prometheus.yml
    - name: create service prometheus
      template:
        src: etc/systemd/system/prometheus.service.j2
        dest: /etc/systemd/system/prometheus.service
    - name: Start service prometheus, in all cases
      ansible.builtin.service:
        name: prometheus.service
        state: restarted
- name: install node-exporter
  hosts: node-exporter
  become: true
  tasks:
    - name: copy install script node-exporter
      template:
        src: install_node-exporter.sh.j2
        dest: install_node-exporter.sh
    - name: run install script node-exporter
      command: bash ./install_node-exporter.sh
    - name: create service node-exporter
      template:
        src: etc/systemd/system/node-exporter.service.j2
        dest: /etc/systemd/system/node-exporter.service
    - name: Enable service node-exporter, in all cases
      ansible.builtin.service:
        name: node-exporter.service
        enabled: yes
    - name: Start service node-exporter, in all cases
      ansible.builtin.service:
        name: node-exporter.service
        state: restarted
- name: install Nginx Log Exporter
  hosts: web
  become: true
  tasks:
    - name: Install Nginx Log Exporter
      ansible.builtin.apt:
        deb: https://github.com/martin-helmich/prometheus-nginxlog-exporter/releases/download/v1.9.2/prometheus-nginxlog-exporter_1.9.2_linux_amd64.deb
    - name: Edit service prometheus-nginxlog-exporter
      template:
        src: etc/prometheus-nginxlog-exporter.hcl.j2
        dest: /etc/prometheus-nginxlog-exporter.hcl
    - name: chmod nginx access log to 664
      file:
        path: /var/log/nginx/access.log
        mode: 0644
    - name: chmod nginx error log to 664
      file:
        path: /var/log/nginx/error.log
        mode: 0644
    - name: Start service Nginx Log Exporter
      ansible.builtin.service:
        name: prometheus-nginxlog-exporter.service
        state: restarted
- name: install Grafana
  hosts: grafana-hosts
  become: true
  tasks:
    - name: Grafana Run the equivalent of "apt-get update" as a separate step
      ansible.builtin.apt:
        update_cache: yes
    - name: Grafana Install a list of packages
      ansible.builtin.apt:
        pkg:
        - git
    - name: Check if Grafana is installed
      command: dpkg-query -l grafana
      ignore_errors: True
      register: grafana_deb_check
    - name: Install Grafana
      ansible.builtin.apt:
        deb: https://dl.grafana.com/oss/release/grafana_7.0.3_amd64.deb
      when: grafana_deb_check.stderr.find('no packages found') != -1
    - name: Enable service Grafana
      ansible.builtin.service:
        name: grafana-server
        enabled: true
    - name: Start service Grafana
      ansible.builtin.service:
        name: grafana-server
        state: started
    - http.query:
      - name: http://localhost:3000/api/datasources
      - method: POST
      - username: admin
      - password: admin
      - data: |
          {"name": "Prometheus",
          "type": "prometheus",
          "url": "http://prometheus:9090",
          "access": "proxy",
          "isDefault": true}
      - header_list:
        - 'Content-Type: application/json'
      - status: 200
      - unless:
        - curl -f http://admin:admin@localhost:3000/api/datasources/name/Prometheus
